C51 COMPILER V9.60.7.0   PID_OPERATION                                                     08/28/2025 16:11:08 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE PID_OPERATION
OBJECT MODULE PLACED IN .\Objects\PID_operation.obj
COMPILER INVOKED BY: D:\keil5C51\C51\BIN\C51.EXE app\PID_operation.c LARGE OPTIMIZE(0,SPEED) BROWSE MODC2 INCDIR(.\app;.
                    -\base) DEBUG OBJECTEXTEND PRINT(.\Listings\PID_operation.lst) OBJECT(.\Objects\PID_operation.obj)

line level    source

   1          #include <intrins.h>
   2          #include "PID_operation.h"
   3          #define uint8_t unsigned char
   4          #define uint16_t unsigned int
   5          volatile int ek_air = 0, ek_1_air = 0, ek_sum_air = 0;
   6          volatile int ek_sol = 0, ek_1_sol = 0, ek_sum_sol = 0;
   7          volatile int Kp_air;
   8          volatile int Ki_air;
   9          volatile int Kd_air;
  10          volatile int Kp_sol;
  11          volatile int Ki_sol;
  12          volatile int Kd_sol;
  13          void PID_Init_Air(void)
  14          {
  15   1              Kp_air = 150;
  16   1              Ki_air =1;
  17   1              Kd_air = 50;
  18   1              ek_air = 0;
  19   1              ek_1_air = 0;
  20   1              ek_sum_air = 0;
  21   1      }
  22          
  23          void PID_Init_Sol(void)
  24          {
  25   1              Kp_sol = 250;
  26   1              Ki_sol = 1;
  27   1              Kd_sol = 100;
  28   1              ek_sol = 0;
  29   1              ek_1_sol = 0;
  30   1              ek_sum_sol = 0;
  31   1      }
  32          uint16_t PID_operation_Air(uint16_t Set_data,uint16_t Cur_data)
  33          {
  34   1              int Kp_coe = 0, Ki_coe = 0, Kd_coe = 0, U_k = 0;
  35   1              ek_1_air = ek_air;
  36   1              ek_air = (Set_data - Cur_data); //??????
  37   1              if (ek_air > 20)
  38   1              {
  39   2                      ek_air = 30;
  40   2                      ek_sum_air = 0x00;
  41   2              }
  42   1              else if (ek_air < -20)
  43   1              {
  44   2                      ek_air = -30;
  45   2                      ek_sum_air = 0x00;
  46   2              }
  47   1              else
  48   1                      ek_sum_air += ek_air;
  49   1              if (ek_sum_air > 4000)
  50   1                      ek_sum_air = 4000;
  51   1              else if (ek_sum_air < -100)
  52   1                      ek_sum_air = -100;
  53   1              Kp_coe = Kp_air * ek_air;
  54   1              Ki_coe = (Ki_air * ek_sum_air)>>2;
C51 COMPILER V9.60.7.0   PID_OPERATION                                                     08/28/2025 16:11:08 PAGE 2   

  55   1              Kd_coe = (Kd_air * (ek_air - ek_1_air));
  56   1              U_k = (Kp_coe + Ki_coe + Kd_coe);
  57   1              if (U_k < 0)
  58   1                      U_k = 0;
  59   1              else if (U_k > 5000)
  60   1                      U_k = 5000;
  61   1              return (U_k);
  62   1      }
  63          
  64          uint16_t PID_operation_Sol(uint16_t Set_dat,uint16_t Cur_dat)
  65          {
  66   1              int Kp_coe_sol = 0, Ki_coe_sol = 0, Kd_coe_sol = 0, U_k_sol = 0;
  67   1              ek_1_sol = ek_sol;
  68   1              ek_sol= (Set_dat - Cur_dat); //??????
  69   1              if (ek_sol > 20)
  70   1              {
  71   2                      ek_sol = 30;
  72   2                      ek_sum_sol = 0x00;
  73   2              }
  74   1              else if (ek_sol < -20)
  75   1              {
  76   2                      ek_sol = -30;
  77   2                      ek_sum_sol = 0x00;
  78   2              }
  79   1              else
  80   1                      ek_sum_sol += ek_sol;
  81   1              if (ek_sum_sol > 5000)
  82   1                      ek_sum_sol = 5000;
  83   1              else if (ek_sum_sol < 0)
  84   1                      ek_sum_sol = 0;
  85   1              Kp_coe_sol = Kp_sol * ek_sol;
  86   1              Ki_coe_sol = Ki_sol * ek_sum_sol;
  87   1              Kd_coe_sol = (Kd_sol * (ek_sol - ek_1_sol));
  88   1              U_k_sol = (Kp_coe_sol + Ki_coe_sol + Kd_coe_sol);
  89   1              if (U_k_sol < 0)
  90   1                      U_k_sol = 0;
  91   1              else if (U_k_sol > 5000)
  92   1                      U_k_sol = 5000;
  93   1              return (U_k_sol);
  94   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    947    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     48    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
